(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    131391,       2956]
NotebookOptionsPosition[    123001,       2812]
NotebookOutlinePosition[    123340,       2827]
CellTagsIndexPosition[    123297,       2824]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Research", "Title",
 CellChangeTimes->{{3.771103159879794*^9, 
  3.771103176832177*^9}},ExpressionUUID->"04a42d79-0ec8-4808-8154-\
bc75d518fe35"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7710015671335497`*^9, 3.7710015766177273`*^9}, 
   3.7711045673358707`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"d6edf5e1-f92a-46aa-a0f4-76fb6b35233d"],

Cell[CellGroupData[{

Cell["General hashing mechanism", "Subtitle",
 CellChangeTimes->{{3.771103238716961*^9, 
  3.771103247885006*^9}},ExpressionUUID->"f306736e-8eeb-4ce3-b22d-\
26ebcf3580bb"],

Cell["Path to directory", "Text",
 CellChangeTimes->{{3.7711035282456503`*^9, 
  3.771103532447279*^9}},ExpressionUUID->"afbbac12-4923-4337-9c63-\
ae59f675888a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$cachePath", " ", "=", " ", 
   RowBox[{"With", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dir", " ", "=", " ", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
          "\"\<cache\>\""}], "}"}], "]"}]}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Quiet", " ", "@", " ", 
       RowBox[{"CreateDirectory", "[", "dir", "]"}]}], ";", "\n", "\t", 
      "dir"}]}], "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771103331077703*^9, 3.7711033355581827`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"d5017bf9-29d9-4512-b101-1113256852bf"],

Cell["Dictionary", "Text",
 CellChangeTimes->{{3.771103535372677*^9, 
  3.7711035394657087`*^9}},ExpressionUUID->"0d8ed3aa-61eb-45cf-892c-\
8003a6d49e93"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"keyValueStore", ",", " ", "HoldRest"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"keyValueStore", "::", "usage"}], "=", 
   "\"\<Hashing storage based of files\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"keyValueStore", "[", 
    RowBox[{"expr_", ",", " ", 
     RowBox[{"default_:", "None"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"With", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"path", " ", "=", " ", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"$cachePath", ",", " ", 
          RowBox[{
           RowBox[{"IntegerString", "[", 
            RowBox[{
             RowBox[{"Hash", "[", "expr", "]"}], ",", " ", "36"}], "]"}], " ",
            "<>", " ", "\"\<.wxf\>\""}]}], "}"}], "]"}]}], "}"}], ",", "\n", 
     "\t", 
     RowBox[{"Replace", "[", "\n", "\t\t", 
      RowBox[{
       RowBox[{"Quiet", " ", "@", " ", 
        RowBox[{"Import", "[", 
         RowBox[{"path", ",", " ", "\"\<WXF\>\""}], "]"}]}], ",", "\n", 
       "\t\t", 
       RowBox[{
        RowBox[{"_", "?", "FailureQ"}], " ", "\[RuleDelayed]", " ", 
        RowBox[{"With", "[", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"evaluated", " ", "=", " ", "default"}], "}"}], ",", " ", 
          "\n", "\t\t\t", 
          RowBox[{
           RowBox[{"Export", "[", 
            RowBox[{"path", ",", " ", "evaluated", ",", " ", "\"\<WXF\>\""}], 
            "]"}], ";", "\n", "\t\t\t", "evaluated"}]}], "\n", "\t\t", 
         "]"}]}]}], "\n", "\t", "]"}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771103872419026*^9, 3.771103892388*^9}, {
  3.7711039627487783`*^9, 3.771103974271432*^9}, {3.771104557152722*^9, 
  3.7711045606680527`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"72f92ca9-1507-49f0-b0f5-c1f12a807235"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Processing control variables", "Subtitle",
 CellChangeTimes->{{3.771154449365231*^9, 
  3.771154458634033*^9}},ExpressionUUID->"f2c2c48d-71fc-4efb-b26d-\
96abd98c43ce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$progressCnt", "=", "0"}], ";", " ", 
  RowBox[{"$progressState", "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CreateProcessingProgress", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"(", "\n", "\t", 
   RowBox[{
    RowBox[{"$progressCnt", "=", "0"}], ";", " ", 
    RowBox[{"$progressState", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"Column", "[", "\[IndentingNewLine]", "\t", 
     RowBox[{"{", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{"ProgressIndicator", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "$progressCnt", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "n"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]",
        "\t\t", 
       RowBox[{"Dynamic", "[", "$progressState", "]"}]}], 
      "\[IndentingNewLine]", "\t", "}"}], "\[IndentingNewLine]", "\t", 
     "]"}]}], "\[IndentingNewLine]", ")"}]}]}], "Code",
 CellChangeTimes->{{3.7711544599562073`*^9, 3.771154464592157*^9}, {
  3.771154557121965*^9, 3.771154581598475*^9}, {3.771154880157722*^9, 
  3.771154899463583*^9}, {3.771156235001375*^9, 3.7711562506885777`*^9}, {
  3.7711685133499928`*^9, 3.771168558304191*^9}, {3.771168717715989*^9, 
  3.7711687622745953`*^9}, {3.7711688140008287`*^9, 3.771168820601674*^9}, {
  3.7711688538351707`*^9, 3.771168854374817*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"78e31a23-5015-41a6-b52c-067d37ac53d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["System files processing", "Subtitle",
 CellChangeTimes->{{3.7709346702064657`*^9, 3.770934670606163*^9}, {
  3.77093473791444*^9, 3.7709347451409082`*^9}, {3.770938737568358*^9, 
  3.770938739462008*^9}, {3.771103188322638*^9, 
  3.7711032000405607`*^9}},ExpressionUUID->"1c312c2c-bafe-4748-ab43-\
2309054ad28a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromFile", "::", "usage"}], "=", 
   "\"\<Returns code from system files\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromFile", "[", "lst_List", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"$progressCnt", "=", "0"}], ";", 
     RowBox[{"Join", " ", "@", " ", 
      RowBox[{"Map", "[", 
       RowBox[{"getSavedSourceFromFile", ",", " ", "lst"}], "]"}]}]}], 
    ")"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getSavedSourceFromFile", "[", "path_String", "]"}], " ", ":=", " ",
   "\n", "\t", 
  RowBox[{"Block", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$Context", " ", "=", " ", "\"\<Dataset`\>\""}], "}"}], ",", " ",
     "\n", "\t\t", 
    RowBox[{"{", 
     RowBox[{"path", ",", 
      RowBox[{"(", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"$progressState", "=", "path"}], ";", "\n", "\t\t\t", 
        RowBox[{"Increment", "[", "$progressCnt", "]"}], ";", "\n", "\t\t\t", 
        
        RowBox[{"keyValueStore", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"getSavedSourceFromFile", ",", " ", "path"}], "}"}], ",", 
          "\n", "\t\t\t\t", 
          RowBox[{"List", " ", "@@", " ", 
           RowBox[{"Map", "[", "\n", "\t\t\t\t\t", 
            RowBox[{"HoldComplete", ",", " ", "\n", "\t\t\t\t\t", 
             RowBox[{"Replace", "[", "\n", "\t\t\t\t\t\t ", 
              RowBox[{
               RowBox[{"Quiet", "@", 
                RowBox[{"ToExpression", "[", "\n", "\t\t\t\t\t\t ", 
                 RowBox[{
                  RowBox[{"StringReplace", "[", "\n", "\t\t\t\t\t\t ", 
                   RowBox[{
                    RowBox[{"ReadString", "[", "path", "]"}], ",", "\n", 
                    "\t\t\t\t\t\t ", 
                    RowBox[{"{", "\[IndentingNewLine]", "\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{"Shortest", "[", 
                    RowBox[{
                    "\"\<Package[\>\"", "~~", "___", "~~", "\"\<]\>\""}], 
                    "]"}], "\[Rule]", " ", "\"\<\>\""}], 
                    "\[IndentingNewLine]", "\t\t\t\t\t\t", "}"}]}], "]"}], 
                  ",", " ", "InputForm", ",", " ", "HoldComplete"}], "]"}]}], 
               ",", " ", 
               RowBox[{"{", "\n", "\t\t\t\t\t\t\t", 
                RowBox[{
                 RowBox[{"h_HoldComplete", " ", "\[RuleDelayed]", " ", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{"h", ",", " ", "Null"}], "]"}]}], ",", "\n", 
                 "\t\t\t\t\t\t\t", 
                 RowBox[{"_", " ", "\[RuleDelayed]", " ", 
                  RowBox[{"HoldComplete", "[", "]"}]}]}], "\n", 
                "\t\t\t\t\t\t", "}"}]}], "\n", "\t\t\t\t\t", "]"}]}], "\n", 
            "\t\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}], ")"}]}], "}"}]}], 
   "\n", "\t", "]"}]}]}], "Code",
 CellChangeTimes->{{3.7711037083252773`*^9, 3.7711037126769133`*^9}, {
   3.7711044049139843`*^9, 3.7711044180635977`*^9}, {3.7711045430006723`*^9, 
   3.771104550446992*^9}, {3.771104759325865*^9, 3.771104761489561*^9}, {
   3.771111619245943*^9, 3.7711116822494717`*^9}, {3.7711146102744913`*^9, 
   3.771114611511507*^9}, {3.771114654104312*^9, 3.7711146631944323`*^9}, {
   3.771117666211034*^9, 3.771117706502379*^9}, {3.77111774981415*^9, 
   3.771117769752265*^9}, {3.771117809057802*^9, 3.7711178123128147`*^9}, {
   3.771118260745412*^9, 3.771118276504182*^9}, {3.771118513322171*^9, 
   3.7711185485157137`*^9}, 3.7711186084731703`*^9, {3.771154324037657*^9, 
   3.7711544369009743`*^9}, {3.771154490837975*^9, 3.771154495568037*^9}, {
   3.771154526306386*^9, 3.771154550855628*^9}, {3.7711548855656633`*^9, 
   3.77115489001587*^9}, {3.7711552636112833`*^9, 3.7711552688974237`*^9}, {
   3.771155665583014*^9, 3.7711556676002502`*^9}, {3.771155701433647*^9, 
   3.771155702851931*^9}, {3.77115574811025*^9, 3.77115575057584*^9}, {
   3.771155940868197*^9, 3.771155942607274*^9}, {3.771156312465146*^9, 
   3.77115631794095*^9}, {3.771156552156784*^9, 3.771156554133953*^9}, {
   3.7711566781173983`*^9, 3.771156684175795*^9}, {3.7711569299008837`*^9, 
   3.7711569546964006`*^9}, {3.771157217307987*^9, 3.7711572376324368`*^9}, {
   3.771157571361992*^9, 3.7711575768603*^9}, {3.77115796993797*^9, 
   3.771157997883091*^9}, {3.771357046245841*^9, 3.771357094565127*^9}, {
   3.771357388413313*^9, 3.7713574003882437`*^9}},
 CellLabel->
  "In[412]:=",ExpressionUUID->"686e24c2-6c3b-45c0-8c63-19de41042b16"],

Cell["Scan the system directory to find all files", "Text",
 CellChangeTimes->{{3.770938718275917*^9, 
  3.770938735676338*^9}},ExpressionUUID->"2d6ff158-15f7-47c3-a3b2-\
1c1361d02eb2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wlFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.wl\>\"", ",", "$InstallationDirectory", ",", "Infinity"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.m\>\"", ",", "$InstallationDirectory", ",", "Infinity"}], 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.770934713855258*^9, 3.7709347289775743`*^9}},
 CellLabel->
  "In[435]:=",ExpressionUUID->"9b0939f3-cd10-455f-9e9f-8537c2c08624"],

Cell["Eliminate all inappropriate cases: loads of data, meta data ", "Text",
 CellChangeTimes->{{3.770996790684544*^9, 3.7709968367322807`*^9}, 
   3.77099688917304*^9},ExpressionUUID->"ab12de57-70a1-4dc7-ba38-\
a277da8827a6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wlFilesFiltered", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Not", "/@", 
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", 
          RowBox[{
          "\"\</SearchIndex/\>\"", "|", "\"\</DefaultEntityTypes/\>\"", "|", 
           "\"\</CompileResources/\>\"", "|", "\"\</init.wl\>\""}]}], 
         "]"}]}]}], "]"}], "&"}], "@", "wlFiles"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mFilesFiltered", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Not", "/@", 
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", 
          RowBox[{
          "\"\</AutoCompletionData/\>\"", "|", "\"\</CharacterEncodings/\>\"",
            "|", "\"\</init.m\>\"", "|", "\"\</load.m\>\"", "|", 
           "\"\</TextResources/\>\"", "|", "\"\</Import.m\>\"", "|", 
           "\"\</Export.m\>\"", "|", "\"\</Options.m\>\"", "|", 
           "\"\</PacletInfo.m\>\""}]}], "]"}]}]}], "]"}], "&"}], "@", 
    "mFiles"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.770938598348545*^9, 3.770938628263776*^9}, {
   3.770938669256652*^9, 3.7709387102871447`*^9}, {3.770938759895789*^9, 
   3.7709387673978243`*^9}, {3.770938823430725*^9, 3.7709388293535624`*^9}, {
   3.770939072096446*^9, 3.770939074779799*^9}, {3.77093913349664*^9, 
   3.7709391441733007`*^9}, {3.7709800363526506`*^9, 3.77098003880448*^9}, 
   3.770980117326167*^9, {3.770980309702726*^9, 3.770980316616427*^9}, 
   3.7709810646677017`*^9, {3.7709969088928013`*^9, 3.770996911157308*^9}, {
   3.7711164954759274`*^9, 3.771116496800888*^9}, {3.771116554751424*^9, 
   3.7711165699133883`*^9}, {3.7711187409646053`*^9, 3.771118742066496*^9}, {
   3.7711187862375927`*^9, 3.7711187911748533`*^9}, {3.7711563376775217`*^9, 
   3.771156337850572*^9}},
 CellLabel->
  "In[437]:=",ExpressionUUID->"9e1c7631-e9e8-4b87-a57c-2d47af45d0b4"]
}, Closed]],

Cell[CellGroupData[{

Cell["Docs processing", "Subtitle",
 CellChangeTimes->{{3.771021252450385*^9, 
  3.7710212565720053`*^9}},ExpressionUUID->"0e6a13a1-dfe9-41b1-a255-\
fe5737e6269a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getSourceFromDoc", "::", "usage"}], "=", 
   "\"\<Returns code from the sample of code\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSourceFromDocExample", "[", "item_", "]"}], " ", ":=", " ", 
   "\n", "\t", 
   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", "\t\t", 
    RowBox[{
     RowBox[{"Quiet", "@", 
      RowBox[{"Cases", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"Join", "@@", 
         RowBox[{"(", 
          RowBox[{"Join", "@@", 
           RowBox[{"(", 
            RowBox[{"item", "//", "Values"}], ")"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", "\t\t\t", 
        RowBox[{
         RowBox[{"Cell", "[", 
          RowBox[{
           RowBox[{"BoxData", "[", "r_", "]"}], ",", " ", "\"\<Input\>\"", 
           ",", " ", "___"}], "]"}], " ", ":>", " ", 
         RowBox[{"MakeExpression", "[", 
          RowBox[{"r", ",", " ", "StandardForm"}], "]"}]}], ",", "\n", 
        "\t\t\t", "Infinity"}], "\[IndentingNewLine]", "\t\t", "]"}]}], ",", 
     "\[IndentingNewLine]", "\t\t", "x_ErrorBox", ",", "\n", "\t\t", "1"}], 
    "\[IndentingNewLine]", "\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getSourceFromDoc", "[", "]"}], " ", ":=", " ", 
  RowBox[{"getSourceFromDoc", "[", 
   RowBox[{"WolframLanguageData", "[", "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"getSourceFromDoc", "[", 
   RowBox[{"symbol", ":", 
    RowBox[{"_Entity", "|", "_String"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"getSourceFromDoc", "[", 
   RowBox[{"{", "symbol", "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"getSourceFromDoc", "[", 
   RowBox[{"symbol", ":", 
    RowBox[{"{", "__String", "}"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"getSourceFromDoc", "[", 
   RowBox[{"WolframLanguageData", "[", "symbol", "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSourceFromDoc", "[", 
    RowBox[{"symbol", ":", 
     RowBox[{"{", "__Entity", "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"DeleteCases", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"DeleteDuplicates", "[", "\n", "     ", 
      RowBox[{"getSourceFromDocExample", " ", "@", " ", 
       RowBox[{"EntityValue", "[", 
        RowBox[{
         RowBox[{"WolframLanguageData", "[", "symbol", "]"}], ",", 
         "\"\<DocumentationExampleInputs\>\""}], "]"}]}], "\n", "      ", 
      "]"}], ",", " ", "\n", "      ", 
     RowBox[{"{", "}"}]}], "\n", "      ", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771108011322398*^9, 3.77110805228898*^9}, {
   3.7711083888461323`*^9, 3.771108392237702*^9}, {3.7711084762525597`*^9, 
   3.771108477068557*^9}, {3.7711513839524517`*^9, 3.771151387949561*^9}, 
   3.771151616834086*^9, {3.7711516552703114`*^9, 3.771151667741378*^9}, {
   3.771151802996715*^9, 3.7711518155865793`*^9}, 3.771151856294437*^9, {
   3.7711525337931833`*^9, 3.7711525347317543`*^9}, {3.771152605763414*^9, 
   3.771152612395789*^9}, {3.771152808632098*^9, 3.7711528467729397`*^9}, {
   3.771152895342938*^9, 3.771152930379771*^9}, {3.771153033527669*^9, 
   3.771153037477355*^9}, {3.7711763298352423`*^9, 3.77117633166784*^9}, {
   3.77117636892022*^9, 3.771176396840876*^9}, {3.771176472029745*^9, 
   3.771176487167638*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"69b5c4b1-8afa-435d-86e3-be69be48f4ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromDocs", "::", "usage"}], "=", 
   "\"\<Returns code from the language entity\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromDocs", "[", "]"}], " ", ":=", " ", 
   RowBox[{"getSavedSourceFromDocs", "[", 
    RowBox[{"WolframLanguageData", "[", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromDocs", "[", "s_String", "]"}], " ", ":=", " ", 
   RowBox[{"getSavedSourceFromDocs", "[", 
    RowBox[{"Entity", "[", 
     RowBox[{"\"\<WolframLanguageSymbol\>\"", ",", " ", "s"}], "]"}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromDocs", "[", "s_List", "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", 
        RowBox[{"getSavedSourceFromDocs", "[", "#", "]"}]}], "}"}], "&"}], 
     ",", " ", "s"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getSavedSourceFromDocs", "[", "s_Entity", "]"}], " ", ":=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Increment", "[", "$progressCnt", "]"}], ";", 
     RowBox[{"keyValueStore", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"getSavedSourceFromDocs", ",", " ", "s"}], "}"}], ",", " ", 
       RowBox[{"getSourceFromDoc", "[", "s", "]"}]}], "]"}]}], ")"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.77110841094707*^9, 3.771108472411973*^9}, {
  3.7711086336913223`*^9, 3.771108636660297*^9}, {3.771112836489799*^9, 
  3.771112837736741*^9}, {3.771114413336413*^9, 3.771114454291439*^9}, {
  3.771153039604569*^9, 3.771153042712205*^9}, {3.771166191956625*^9, 
  3.771166232620422*^9}, {3.771166321476797*^9, 3.771166339656691*^9}, {
  3.771166525007656*^9, 3.771166526361718*^9}, {3.771168092116076*^9, 
  3.771168112109476*^9}, {3.7711683168125887`*^9, 3.771168337175989*^9}, {
  3.771168570967037*^9, 3.7711686220403633`*^9}, {3.77116883425427*^9, 
  3.7711688429794416`*^9}, {3.7711765218622313`*^9, 3.7711765405056887`*^9}, {
  3.77119270396451*^9, 3.771192709376992*^9}, {3.7711930708053083`*^9, 
  3.771193073094369*^9}, {3.771195416780251*^9, 3.7711954171822023`*^9}, {
  3.771197601299687*^9, 3.77119763835603*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"bd18636c-03d0-4ccd-ae98-9ab6217a1ee5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dataset", "Subtitle",
 CellChangeTimes->{{3.771150901294355*^9, 
  3.771150905625339*^9}},ExpressionUUID->"8ffb2f96-8e13-497b-bbc1-\
8c83f89cef77"],

Cell[CellGroupData[{

Cell["WL and M files ", "Section",
 CellChangeTimes->{{3.771166144854796*^9, 
  3.771166163560316*^9}},ExpressionUUID->"77f9b3a6-58dc-44e8-a6bc-\
888e178c7587"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wlData", "=", 
   RowBox[{"getSavedSourceFromFile", "[", "wlFilesFiltered", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771164669432733*^9, 3.771164670610942*^9}},
 CellLabel->
  "In[439]:=",ExpressionUUID->"f35e485a-f612-48e5-9486-87b5061e2fe6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mData", "=", 
   RowBox[{"getSavedSourceFromFile", "[", "mFilesFiltered", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771164681380577*^9, 3.7711646997062597`*^9}},
 CellLabel->
  "In[440]:=",ExpressionUUID->"9fcf39a0-4ad3-4566-add5-e02dedba6d85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"wlData", ",", "mData"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771164913532484*^9, 3.771164932034195*^9}},
 CellLabel->
  "In[441]:=",ExpressionUUID->"7d215e69-4a11-43ff-b590-0a6b70a4a3aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rootLen", "=", 
   RowBox[{"StringLength", "@", "$InstallationDirectory"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.771164057821149*^9, 3.771164081798232*^9}, {
  3.771164122540698*^9, 3.7711641228226843`*^9}},
 CellLabel->
  "In[445]:=",ExpressionUUID->"2ca372c9-1bfa-4af8-9f75-493b02736994"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreateProcessingProgress", "[", 
  RowBox[{"Length", "@", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.771544401472829*^9, 3.7715444097851458`*^9}, 
   3.771545266733132*^9},
 CellLabel->
  "In[449]:=",ExpressionUUID->"d7cb4cbc-6998-4238-a27d-3fa158d2706c"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ProgressIndicatorBox[Dynamic[$CellContext`$progressCnt], {0, 2262}]},
    {
     DynamicBox[ToBoxes[$CellContext`$progressState, StandardForm],
      ImageSizeCache->{109., {3., 10.}}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.771545267202983*^9, 3.771545337598888*^9}},
 CellLabel->
  "Out[449]=",ExpressionUUID->"c1fea307-c300-4706-9a87-0be009e022e9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"$progressCnt", "=", "0"}], ";", 
     RowBox[{"Dataset", "[", 
      RowBox[{"Join", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MapIndexed", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Increment", "[", "$progressCnt", "]"}], ";", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", "n"}], "}"}], ",", 
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<code\>\"", "->", "x"}], ",", 
                 RowBox[{"\"\<source\>\"", "->", 
                  RowBox[{"StringTake", "[", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rootLen", "+", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ",", 
                 RowBox[{"\"\<index\>\"", "->", 
                  RowBox[{"First", "@", "n"}]}]}], "|>"}]}], "]"}]}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", "data"}], 
        ")"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771158221815235*^9, 3.771158296967383*^9}, {
  3.7711637384652767`*^9, 3.7711638109605494`*^9}, {3.771163870507001*^9, 
  3.7711639215859957`*^9}, {3.77116395435078*^9, 3.771163981894388*^9}, {
  3.771164092063315*^9, 3.771164141355591*^9}, {3.771164195500985*^9, 
  3.7711642172983093`*^9}, {3.771164248028761*^9, 3.771164325238901*^9}, {
  3.7711643878181953`*^9, 3.771164490184608*^9}, {3.7711649840724382`*^9, 
  3.771165020781576*^9}, {3.771165464373296*^9, 3.771165466056879*^9}, {
  3.7715453237083387`*^9, 3.771545330969819*^9}},
 CellLabel->
  "In[450]:=",ExpressionUUID->"04b591f1-c2c2-4eb0-8255-c1dd1ddaa5dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
      "\"\<dataset/dataset_system.wxf\>\""}], "}"}], "]"}], ",", "dataset", 
   ",", "\"\<WXF\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.771165865123226*^9, 3.771165943716751*^9}, {
  3.7715453035084457`*^9, 3.7715453072696667`*^9}},
 CellLabel->
  "In[451]:=",ExpressionUUID->"ae8f5789-4cac-4cf6-8836-58fe10bb1dfa"],

Cell[BoxData["\<\"/Users/ckorikov/___wss19/WSS-19/Final \
Project/Research/dataset/dataset_system.wxf\"\>"], "Output",
 CellChangeTimes->{3.771165761461216*^9, 3.7711659550977497`*^9, 
  3.7715456284944553`*^9},
 CellLabel->
  "Out[451]=",ExpressionUUID->"76ac2fa3-ee3b-4cb9-9edd-3b8381ed875e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Docs", "Section",
 CellChangeTimes->{{3.771166172194787*^9, 
  3.7711661736571627`*^9}},ExpressionUUID->"75373d53-28bc-4960-b9d2-\
35d7c1300360"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"WolframLanguageData", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7711912952452393`*^9, 3.771191296248658*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"af0bda83-2bcb-4214-acee-c677e18b9d9e"],

Cell[BoxData["5436"], "Output",
 CellChangeTimes->{3.771191296516424*^9, 3.771192738035719*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"21e322b0-e308-47a1-a656-69c0fe244d35"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataDocs", "=", 
   RowBox[{"getSavedSourceFromDocs", "[", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771166439964089*^9, 3.771166452388054*^9}, {
   3.7711665308217497`*^9, 3.7711665405435867`*^9}, {3.771168040023335*^9, 
   3.7711680614276342`*^9}, {3.7711681182079477`*^9, 
   3.7711681609001637`*^9}, {3.771168279786762*^9, 3.77116828669459*^9}, {
   3.771168672807105*^9, 3.7711686773864326`*^9}, 3.771168777867002*^9, {
   3.771168869250956*^9, 3.7711688834462013`*^9}, 3.771191200847703*^9, {
   3.771191248791458*^9, 3.771191252564321*^9}, {3.7711927162606297`*^9, 
   3.771192745448707*^9}, {3.771546298608363*^9, 3.771546299067955*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"e185f23b-d9a8-4f8b-b2b5-edd1ca6246b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreateProcessingProgress", "[", "5436", "]"}]], "Input",
 CellChangeTimes->{{3.771196973374559*^9, 3.771197005744138*^9}, 
   3.771197656136401*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"1b17a20e-645d-4c6a-8ed3-0a6636981607"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ProgressIndicatorBox[Dynamic[$CellContext`$progressCnt], {0, 5436}]},
    {
     DynamicBox[ToBoxes[$CellContext`$progressState, StandardForm],
      ImageSizeCache->{109., {3., 10.}}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.7711970062659817`*^9, {3.7711976567172318`*^9, 3.7711976855742197`*^9}, 
   3.771197757901967*^9, 3.771545723487401*^9, 3.7715462941897707`*^9, 
   3.771546675890483*^9, 3.771548816301511*^9, 3.7715880176706467`*^9, 
   3.771588277084949*^9, 3.7715949157058287`*^9, 3.771595167165962*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"3572d9c9-e01d-40ec-8903-24a6e7ebfd3e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetDocs", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"$progressCnt", "=", "0"}], ";", 
     RowBox[{"Dataset", "[", 
      RowBox[{"Join", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MapIndexed", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Increment", "[", "$progressCnt", "]"}], ";", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", "n"}], "}"}], ",", 
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<code\>\"", "->", "x"}], ",", 
                 RowBox[{"\"\<source\>\"", "->", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                 RowBox[{"\"\<index\>\"", "->", 
                  RowBox[{"First", "@", "n"}]}]}], "|>"}]}], "]"}]}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
         "dataDocs"}], ")"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771196860749856*^9, 3.771196884760784*^9}, {
   3.771196952803966*^9, 3.771196953576014*^9}, {3.7711970116281643`*^9, 
   3.771197014034935*^9}, {3.771545768032401*^9, 3.771545768887885*^9}, 
   3.771546306815785*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"2ba1e440-f36e-4114-b688-962e7a0aab29"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
      "\"\<dataset/dataset_docs.wxf\>\""}], "}"}], "]"}], ",", "datasetDocs", 
   ",", "\"\<WXF\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.771165865123226*^9, 3.771165943716751*^9}, {
   3.771197290239388*^9, 3.771197291101881*^9}, 3.771545814236524*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"c7c49f9d-0d39-44e6-8bdf-e50287f00b9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["GitHub", "Section",
 CellChangeTimes->{{3.771544051803091*^9, 
  3.771544065460608*^9}},ExpressionUUID->"40950b4d-9185-4588-8c93-\
9d7e947608bb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"wlGHFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.wl\>\"", ",", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
        "\"\<assets/repos\>\""}], "}"}], "]"}], ",", "Infinity"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"mGHFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.m\>\"", ",", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
        "\"\<assets/repos\>\""}], "}"}], "]"}], ",", "Infinity"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.770934713855258*^9, 3.7709347289775743`*^9}, {
  3.77154382499791*^9, 3.771543829963188*^9}, {3.771543966257214*^9, 
  3.771543970808375*^9}},
 CellLabel->
  "In[417]:=",ExpressionUUID->"da0599db-56f2-4aa2-828f-a62aedbf63bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mGHData", "=", 
   RowBox[{"getSavedSourceFromFile", "[", "mGHFiles", "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.7715440683872538`*^9, 3.771544073261702*^9}},
 CellLabel->
  "In[423]:=",ExpressionUUID->"d0b51622-af00-4a6e-a282-101e9be8b803"],

Cell[BoxData[
 TemplateBox[{
  "path$","shdw",
   "\"Symbol \\!\\(\\*RowBox[{\\\"\\\\\\\"path$\\\\\\\"\\\"}]\\) appears in \
multiple contexts \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\\\"System`\\\\\
\\\"\\\", \\\",\\\", \\\"\\\\\\\"Global`\\\\\\\"\\\"}], \\\"}\\\"}]\\); \
definitions in context \\!\\(\\*RowBox[{\\\"\\\\\\\"System`\\\\\\\"\\\"}]\\) \
may shadow or be shadowed by other definitions.\"",2,423,104,
   33559716098308266813,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771544148035783*^9},
 CellLabel->
  "During evaluation of \
In[423]:=",ExpressionUUID->"2a0e4b29-b18b-4c0e-9af1-3abb348a2b96"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"rootLen", "=", 
   RowBox[{"StringLength", "@", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
       "\"\<assets/repos\>\""}], "}"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{3.77154422767906*^9},
 CellLabel->
  "In[424]:=",ExpressionUUID->"4c2061b5-ce8e-496a-92d5-dc82d3a01f0c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"$progressCnt", "=", "0"}], ";", 
     RowBox[{"Dataset", "[", 
      RowBox[{"Join", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MapIndexed", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Increment", "[", "$progressCnt", "]"}], ";", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", "n"}], "}"}], ",", 
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<code\>\"", "->", "x"}], ",", 
                 RowBox[{"\"\<source\>\"", "\[Rule]", 
                  RowBox[{"\"\<github\>\"", "<>", 
                   RowBox[{"StringTake", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"rootLen", "+", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}]}]}], ",", 
                 RowBox[{"\"\<index\>\"", "->", 
                  RowBox[{"First", "@", "n"}]}]}], "|>"}]}], "]"}]}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
         "mGHData"}], ")"}]}], "]"}]}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771158221815235*^9, 3.771158296967383*^9}, {
   3.7711637384652767`*^9, 3.7711638109605494`*^9}, {3.771163870507001*^9, 
   3.7711639215859957`*^9}, {3.77116395435078*^9, 3.771163981894388*^9}, {
   3.771164092063315*^9, 3.771164141355591*^9}, {3.771164195500985*^9, 
   3.7711642172983093`*^9}, {3.771164248028761*^9, 3.771164325238901*^9}, {
   3.7711643878181953`*^9, 3.771164490184608*^9}, {3.7711649840724382`*^9, 
   3.771165020781576*^9}, {3.771165464373296*^9, 3.771165466056879*^9}, 
   3.7715442486330633`*^9, {3.771544451156661*^9, 3.771544465751799*^9}},
 CellLabel->
  "In[430]:=",ExpressionUUID->"0d3fbad7-e1f9-45a1-bf9b-9de35d0e5e5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreateProcessingProgress", "[", 
  RowBox[{"Length", "@", "mGHData"}], "]"}]], "Input",
 CellChangeTimes->{{3.771544401472829*^9, 3.7715444097851458`*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"2cdde771-b0e9-452c-adc8-17f4c959df62"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ProgressIndicatorBox[Dynamic[$CellContext`$progressCnt], {0, 12958}]},
    {
     DynamicBox[ToBoxes[$CellContext`$progressState, StandardForm],
      ImageSizeCache->{0., {0., 7.}}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.771544410200569*^9, 3.771544485018589*^9},
 CellLabel->
  "Out[429]=",ExpressionUUID->"fdb1f487-3856-4f2b-af3a-fd2da7fb273c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["dataset"], "Input",
 CellLabel->
  "In[431]:=",ExpressionUUID->"d88e9a5f-f909-4939-88e5-9e069d6c2e44"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 179161, "InitialType" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{"code", "source", "index"}, {
           TypeSystem`AnyType, 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[Integer]}], 179161], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "code"} -> 1, {All, "source"} -> 
           1, {All, "index"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "code" -> TypeSystem`PackageScope`UnknownShape, "source" -> 
              TypeSystem`PackageScope`AtomShape[480.00000000000006`], "index" -> 
              TypeSystem`PackageScope`AtomShape[34]]]], 20, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[1289522898], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{"code", "source", "index"}, {
           TypeSystem`AnyType, 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[Integer]}], 179161], "HandleQ" -> True, 
        "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1289522898]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 179142, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"code\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"code\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    All, "code"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[All, "code"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"source\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"source\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    All, "source"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[All, "source"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"index\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"index\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    All, "index"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[All, "index"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    
                    RowBox[{
                    "%", " ", "Dataset`Anmiate", " ", "40", " ", "%", " ", 
                    "power", " ", "Dataset`for", " ", "Dataset`movie"}], 
                    "]"}], FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[1, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/aabecker-RoboticSwarmControlLab/\
RoboticSwarmControlLab-master/PaperTempla \[DescendingEllipsis] ", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[1, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[1, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"\[Phi]", "[", "x_", "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", "x", "]"}], ">", "1"}], ",", "0", ",", 
                    RowBox[{"1", "-", 
                    RowBox[{"Abs", "[", "x", "]"}]}]}], "]"}]}], "]"}], 
                   FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[2, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[2, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[2, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    3, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[3, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[3, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[3, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"\[Phi]", "[", 
                    RowBox[{"lx_", ",", "ly_", ",", "i_", ",", "j_"}], "]"}], 
                    ":=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[Phi]", "[", 
                    RowBox[{"lx", ",", "i"}], "]"}], "[", "#1", "]"}], " ", 
                    RowBox[{
                    RowBox[{"\[Phi]", "[", 
                    RowBox[{"ly", ",", "j"}], "]"}], "[", "#2", "]"}]}], 
                    "&"}]}], "]"}], FontFamily -> "Source Code Pro", FontSize -> 
                   13, ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[4, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[4, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[4, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    5, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[5, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[5, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["4"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[5, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`ceil", "[", 
                    RowBox[{"x_", ",", "l_"}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"x", "\[GreaterEqual]", "1"}], ",", 
                    SuperscriptBox["2", 
                    RowBox[{"l", "-", "1"}]], ",", 
                    RowBox[{"1", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{
                    SuperscriptBox["2", 
                    RowBox[{"l", "-", "1"}]], " ", "x"}], "]"}]}]}], "]"}]}], 
                    "]"}], FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[6, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[6, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[6, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"switch", "[", "x_", "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"x", "\[GreaterEqual]", "1"}], ",", "x", ",", 
                    "1"}], "]"}]}], "]"}], FontFamily -> "Source Code Pro", 
                   FontSize -> 13, ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[7, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[7, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[7, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`switch2", "[", "x_", "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"x", "\[Equal]", 
                    RowBox[{"-", "1"}]}], ",", "0", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"x", "\[Equal]", "0"}], ",", "1", ",", 
                    SuperscriptBox["2", 
                    RowBox[{"-", "x"}]]}], "]"}]}], "]"}]}], "]"}], 
                   FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[8, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[8, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[8, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`switch3", "[", 
                    RowBox[{"x_", ",", "i_"}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"x", "\[LessEqual]", "0"}], ",", "1", ",", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"i", "+", "1"}]], " ", 
                    SuperscriptBox["2", 
                    RowBox[{"-", "x"}]]}]}], "]"}]}], "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[9, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[9, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[9, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"area", "[", "kx_", "]"}], ":=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"kx", "\[Equal]", 
                    RowBox[{"-", "1"}]}], ",", "1", ",", 
                    RowBox[{"kx", "\[Equal]", "0"}], ",", 
                    FractionBox["1", "2"], ",", 
                    RowBox[{"kx", ">", "0"}], ",", 
                    SuperscriptBox["2", 
                    RowBox[{"-", "kx"}]]}], "]"}]}], "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[10, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[10, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[10, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`column2", "[", 
                    RowBox[{"diag_", ",", "row_"}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"diag", "<", "1"}], ",", "diag", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"row", "<", "1"}], ",", "diag", ",", 
                    RowBox[{"diag", "-", "row", "+", "1"}]}], "]"}]}], 
                    "]"}]}], "]"}], FontFamily -> "Source Code Pro", FontSize -> 
                   13, ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[11, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[11, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[11, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`column1", "[", 
                    RowBox[{"diag_", ",", "row_"}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"diag", "\[Equal]", "row"}], ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"Dataset`column2", "[", 
                    RowBox[{"diag", ",", "row"}], "]"}]}], "]"}]}], "]"}], 
                   FontFamily -> "Source Code Pro", FontSize -> 13, 
                   ShowStringCharacters -> True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[12, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[12, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["11"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[12, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`getrow", "[", 
                    RowBox[{"perp_", ",", "diag_"}], "]"}], ":=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"diag", "\[Equal]", 
                    RowBox[{"-", "1"}]}], ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"diag", "\[Equal]", "0"}], ",", 
                    RowBox[{"Min", "[", 
                    RowBox[{"perp", ",", "0"}], "]"}], ",", 
                    RowBox[{"perp", "\[LessEqual]", "diag"}], ",", "perp", 
                    ",", "True", ",", "diag"}], "]"}]}], "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[13, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[13, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["12"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[13, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    14, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[14, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[14, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["13"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[14, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`endperp", "[", "n_", "]"}], ":=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"n", "\[Equal]", 
                    RowBox[{"-", "1"}]}], ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"n", "\[Equal]", "0"}], ",", "1", ",", "True", 
                    ",", 
                    RowBox[{"n", "+", "1"}]}], "]"}]}], "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[15, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[15, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["14"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[15, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    16, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[16, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[16, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["15"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[16, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    17, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[17, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[17, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["16"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[17, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    18, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[18, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[18, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["17"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[18, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"HoldComplete", "[", 
                    RowBox[{
                    RowBox[{"Dataset`standardProject2D", "[", 
                    RowBox[{"f_", ",", "lx_", ",", "ly_"}], "]"}], ":=", 
                    RowBox[{"Dataset`standardReconstruct2D", "[", 
                    RowBox[{
                    RowBox[{"Dataset`standardCoefficients2D", "[", 
                    RowBox[{"f", ",", "lx", ",", "ly"}], "]"}], ",", "lx", 
                    ",", "ly"}], "]"}]}], "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[19, 
                   Key["code"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[19, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["18"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[19, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["\[Ellipsis]", 
                    Style[
                    "\[Ellipsis]", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][{
                    20, 
                    Key["code"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[20, 
                   Key["code"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}], 
               Pane[
                Annotation[
                "github/ABAtanasov-Sparse-Grids/Sparse-Grids-master/Checking \
SBP/Methods.m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[20, 
                   Key["source"]]], "Mouse"], 
                ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["19"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
                 
                  GeneralUtilities`Slice[20, 
                   Key["index"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    179161 (-20), {1, 179161 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 179161 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    179161, FontColor -> GrayLevel[0], FontWeight -> 
                    "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 179161 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    179161 20, {1, 179161 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    179161 (-20), {1, 179161 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 179161 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    179161, FontColor -> GrayLevel[0], FontWeight -> 
                    "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 179161 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    179161 20, {1, 179161 - 20 + 1}])}]}, "   "]]], 
                Background -> GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849}, 
                    1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849}, 
                    10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849}, 
                    30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849}, 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849}, 
                    100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 696788849]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[696788849][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[
         TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {1268., {282.134033203125, 287.865966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.77154509473391*^9},
 CellLabel->
  "Out[431]=",ExpressionUUID->"cf13a8cb-8593-49a3-a4d6-8324a6d55867"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
      "\"\<dataset/dataset_github.wxf\>\""}], "}"}], "]"}], ",", "dataset", 
   ",", "\"\<WXF\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.771545149967784*^9, 3.7715451523617077`*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"2d9adbda-2b6a-4e07-8f36-efe5abb331d7"],

Cell[BoxData["\<\"/Users/ckorikov/___wss19/WSS-19/Final \
Project/Research/dataset/dataset_github.wxf\"\>"], "Output",
 CellChangeTimes->{3.771545181017391*^9},
 CellLabel->
  "Out[432]=",ExpressionUUID->"6cfa2ecb-fcf0-443f-a6db-5b7fe7e04c56"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistics", "Subsection",
 CellChangeTimes->{{3.77101175459201*^9, 
  3.771011757819482*^9}},ExpressionUUID->"2751c1cd-3ff4-4fa6-928b-\
c54954005315"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"Length", "[", "wlFilesFiltered", "]"}], 
     RowBox[{"Length", "[", "wlFiles", "]"}]], "//", "N"}], ",", 
   RowBox[{"Length", "[", "wlFilesFiltered", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.771011727255068*^9, 3.771011743710354*^9}, {
  3.771011805498316*^9, 3.771011809955195*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"4e912703-f0d2-4051-acba-860766fdd1c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.47645429362880887`", ",", "172"}], "}"}]], "Output",
 CellChangeTimes->{{3.771011741286704*^9, 3.771011744255425*^9}, 
   3.7710118104077263`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"de6df5c1-8657-44d8-a876-729508bf1c67"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"Length", "[", "mFilesFiltered", "]"}], 
     RowBox[{"Length", "[", "mFiles", "]"}]], "//", "N"}], ",", 
   RowBox[{"Length", "[", "mFilesFiltered", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.771011727255068*^9, 3.7710117784372377`*^9}, {
  3.771011817196504*^9, 3.771011819622525*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"4b3a620d-6fef-43ee-9126-10efc58aaff4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.40192307692307694`", ",", "2090"}], "}"}]], "Output",
 CellChangeTimes->{3.771011779084696*^9, 3.771011820002055*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"ef7f8274-2255-4c92-982e-01e35f1b0bd0"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export Full", "Subtitle",
 CellChangeTimes->{{3.771548172404361*^9, 
  3.771548178798625*^9}},ExpressionUUID->"54521ab8-4646-46a9-9e8d-\
c2816127e30e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetGitHub", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
        "\"\<dataset/dataset_github.wxf\>\""}], "}"}], "]"}], ",", " ", 
     "\"\<WXF\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7713567819467382`*^9, 3.771356824159231*^9}, {
  3.771547468193598*^9, 3.771547525187395*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"ec8cd550-9295-491e-8bc0-6b447fdee824"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetSystem", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
        "\"\<dataset/dataset_system.wxf\>\""}], "}"}], "]"}], ",", " ", 
     "\"\<WXF\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771547553262579*^9, 3.771547560751933*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"64b9fa17-71d8-4913-ac89-ca4ee8b85bd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetFull", "=", 
   RowBox[{"Dataset", "@", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Normal", "@", "datasetDocs"}], ",", 
      RowBox[{"Normal", "@", "datasetGitHub"}], ",", 
      RowBox[{"Normal", "@", "datasetSystem"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7711992645516148`*^9, 3.771199266000531*^9}, {
   3.771199712875442*^9, 3.7711997333222313`*^9}, 3.771547414378188*^9, 
   3.77154752942231*^9, {3.771547569529039*^9, 3.771547577338744*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"9a3dd58f-e3e0-4094-8835-4bdf6d78073c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"codeArray", " ", "=", " ", 
   RowBox[{
    RowBox[{"Normal", "[", "datasetFull", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "\"\<code\>\""}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.7715486512050667`*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"e524f0d8-df24-40f9-ac97-6c4edd459b97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", "@", "codeArray"}]], "Input",
 CellChangeTimes->{{3.7715887872559834`*^9, 3.7715887907585793`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"cc804feb-f8a6-4f89-a1cb-e1a0123501e1"],

Cell[BoxData["3165306198"], "Output",
 CellChangeTimes->{3.771588792599457*^9, 3.771595258181182*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"18e3ab05-b5d1-4464-a734-4b1e59b5fc92"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"codeArrayC", "=", 
   RowBox[{"ParallelMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"HoldPattern", "@", 
            RowBox[{"Image", "[", 
             RowBox[{"_", ",", "x___"}], "]"}]}], ":>", 
           RowBox[{"Image", "[", 
            RowBox[{"$DATA$", ",", "x"}], "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"h_CompressedData", "\[RuleDelayed]", 
           RowBox[{"CompressedData", "[", "$DATA$", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"h_ByteArray", "\[RuleDelayed]", 
           RowBox[{"HoldComplete", "@", 
            RowBox[{"ByteArray", "[", "$DATA$", "]"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"h_NumericArray", "\[RuleDelayed]", 
           RowBox[{"HoldComplete", "@", 
            RowBox[{"NumericArray", "[", 
             RowBox[{"$DATA$", ",", "\"\<\>\""}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Nest", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"List", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"_Real", "|", "_Integer", "|", "#"}], ")"}], ".."}], 
               "]"}], "&"}], ",", " ", 
             RowBox[{"List", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"_Real", "|", "_Integer"}], ")"}], ".."}], "]"}], ",",
              " ", "40"}], "]"}], "\[RuleDelayed]", "$DATA$"}]}], 
         "\[IndentingNewLine]", "}"}], ",", "Infinity"}], "]"}], "&"}], ",", 
     "codeArray"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.771589820812323*^9, 3.771589822565881*^9}, {
   3.771590425588512*^9, 3.7715904864828053`*^9}, {3.771590522410379*^9, 
   3.771590535532249*^9}, {3.771590586793147*^9, 3.771590599402493*^9}, {
   3.771590668064314*^9, 3.771590697278664*^9}, {3.771590738592473*^9, 
   3.771590750311159*^9}, {3.7715907949694147`*^9, 3.7715908032626257`*^9}, {
   3.771590902327943*^9, 3.771590933923135*^9}, {3.7715948466610813`*^9, 
   3.7715948991612263`*^9}, {3.771594956585444*^9, 3.771594958322583*^9}, {
   3.771595281518022*^9, 3.771595414344455*^9}, {3.771595450829335*^9, 
   3.771595475249288*^9}, {3.771595530071439*^9, 3.771595651133513*^9}, {
   3.771595789202676*^9, 3.7715959853288116`*^9}, {3.771596036415309*^9, 
   3.7715962062594347`*^9}, {3.77159638626136*^9, 3.771596540013844*^9}, 
   3.771597495670043*^9, {3.771597552308017*^9, 3.771597572865674*^9}, {
   3.771712852007868*^9, 
   3.771712862442733*^9}},ExpressionUUID->"4ec01d83-69d3-4917-a45a-\
1f0e803c3b2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"codeArrayCsmall", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"codeArrayC", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"ByteCount", "[", 
        RowBox[{"Unevaluated", "[", "#", "]"}], "]"}], "<", "30000"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7715497865870934`*^9, 3.771549824937106*^9}, {
   3.771549861962955*^9, 3.771549886546755*^9}, {3.771549971135857*^9, 
   3.771549971371154*^9}, {3.7715500101180077`*^9, 3.771550023544841*^9}, 
   3.771550061580165*^9, {3.771550105468255*^9, 3.771550107387472*^9}, {
   3.7715501391380787`*^9, 3.771550208361059*^9}, {3.771550292121621*^9, 
   3.771550315420295*^9}, {3.77155038051492*^9, 3.771550399233945*^9}, {
   3.771599620687964*^9, 3.771599668505904*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"426df471-75c9-4def-ba5b-8fd1a513b4ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bytesLen", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"ByteCount", "[", "#", "]"}], "&"}], "/@", "codeArrayCsmall"}]}],
   ";"}]], "Input",
 CellChangeTimes->{
  3.7715962242255487`*^9, {3.771596341154046*^9, 3.771596343385602*^9}, {
   3.771597513907022*^9, 3.7715975329167747`*^9}, 3.7715993053048887`*^9, {
   3.7715995201816263`*^9, 3.771599536547103*^9}, 3.771599685407074*^9},
 CellLabel->
  "In[147]:=",ExpressionUUID->"720a95d0-4b32-4b23-8986-1c13a9f4958b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "[", 
   RowBox[{"bytesLen", ",", "Greater"}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7715995440805387`*^9, 3.771599602235358*^9}, 
   3.771599692528702*^9},
 CellLabel->
  "In[149]:=",ExpressionUUID->"2d7f752a-aaae-4d69-bdd2-2bc7ea610c11"],

Cell[BoxData["29960"], "Output",
 CellChangeTimes->{
  3.7715995457808533`*^9, {3.771599588715467*^9, 3.771599605601269*^9}, {
   3.771599690050233*^9, 3.7715996950719347`*^9}},
 CellLabel->
  "Out[149]=",ExpressionUUID->"d3cc8ccc-f041-4367-b746-b99c9f7711c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "codeArrayCsmall"}]], "Input",
 CellChangeTimes->{{3.771599719231221*^9, 3.771599720668798*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"ee623f19-7cd4-4b71-967f-0b52e4a9ecee"],

Cell[BoxData["463750"], "Output",
 CellChangeTimes->{3.771599721365597*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"00a0398d-75c3-41f2-8371-870926774661"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "codeArrayC"}]], "Input",
 CellChangeTimes->{{3.771599724902174*^9, 3.771599726372366*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"b12ae9c6-5857-49a1-85c6-15a73df4265c"],

Cell[BoxData["464991"], "Output",
 CellChangeTimes->{3.771599726860835*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"9065fed4-6b71-41e7-b5f5-76dee34091b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", "@", "codeArrayCsmall"}]], "Input",
 CellChangeTimes->{3.7715997039546423`*^9},
 CellLabel->
  "In[150]:=",ExpressionUUID->"6c94f2d7-0d41-49cf-804e-6b5664e5ee2e"],

Cell[BoxData["437364584"], "Output",
 CellChangeTimes->{3.77159970478885*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"ce2bfe9e-72c1-41c1-a2e3-4a377f17a50c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", "@", "codeArrayC"}]], "Input",
 CellChangeTimes->{{3.77159928279309*^9, 3.771599285711458*^9}, 
   3.771599699124614*^9},
 CellLabel->
  "In[138]:=",ExpressionUUID->"547cafb0-725f-434a-94cc-0953feb6d133"],

Cell[BoxData["1697120440"], "Output",
 CellChangeTimes->{3.771599287418024*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"08143489-cfb2-4902-a664-b72cb770169f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
      "\"\<dataset/dataset_full_2.wxf\>\""}], "}"}], "]"}], ",", 
   "codeArrayCsmall", ",", "\"\<WXF\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7711997965722*^9, 3.7711998003688707`*^9}, {
   3.771547637574045*^9, 3.771547637815975*^9}, 3.7715997443279343`*^9},
 CellLabel->
  "In[153]:=",ExpressionUUID->"9d4765ef-87d2-4cb2-91f1-e7705cd3adb3"],

Cell[BoxData["\<\"/Users/ckorikov/___wss19/WSS-19/Final \
Project/Research/dataset/dataset_full_2.wxf\"\>"], "Output",
 CellChangeTimes->{3.771599781309795*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"5190d6e7-aa5a-4bbd-bd01-f0bbfaf58764"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 614},
WindowMargins->{{Automatic, -38}, {21, Automatic}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 151, 3, 98, "Title",ExpressionUUID->"04a42d79-0ec8-4808-8154-bc75d518fe35"],
Cell[737, 27, 270, 5, 30, "Input",ExpressionUUID->"d6edf5e1-f92a-46aa-a0f4-76fb6b35233d"],
Cell[CellGroupData[{
Cell[1032, 36, 171, 3, 53, "Subtitle",ExpressionUUID->"f306736e-8eeb-4ce3-b22d-26ebcf3580bb"],
Cell[1206, 41, 161, 3, 35, "Text",ExpressionUUID->"afbbac12-4923-4337-9c63-ae59f675888a"],
Cell[1370, 46, 698, 17, 129, "Code",ExpressionUUID->"d5017bf9-29d9-4512-b101-1113256852bf"],
Cell[2071, 65, 154, 3, 35, "Text",ExpressionUUID->"0d8ed3aa-61eb-45cf-892c-8003a6d49e93"],
Cell[2228, 70, 1890, 47, 281, "Code",ExpressionUUID->"72f92ca9-1507-49f0-b0f5-c1f12a807235"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4155, 122, 174, 3, 53, "Subtitle",ExpressionUUID->"f2c2c48d-71fc-4efb-b26d-96abd98c43ce"],
Cell[4332, 127, 1436, 29, 224, "Code",ExpressionUUID->"78e31a23-5015-41a6-b52c-067d37ac53d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5805, 161, 318, 5, 53, "Subtitle",ExpressionUUID->"1c312c2c-bafe-4748-ab43-2309054ad28a"],
Cell[6126, 168, 4551, 89, 528, "Code",ExpressionUUID->"686e24c2-6c3b-45c0-8c63-19de41042b16"],
Cell[10680, 259, 185, 3, 35, "Text",ExpressionUUID->"2d6ff158-15f7-47c3-a3b2-1c1361d02eb2"],
Cell[10868, 264, 512, 13, 72, "Code",ExpressionUUID->"9b0939f3-cd10-455f-9e9f-8537c2c08624"],
Cell[11383, 279, 226, 3, 35, "Text",ExpressionUUID->"ab12de57-70a1-4dc7-ba38-a277da8827a6"],
Cell[11612, 284, 1969, 43, 73, "Code",ExpressionUUID->"9e1c7631-e9e8-4b87-a57c-2d47af45d0b4"]
}, Closed]],
Cell[CellGroupData[{
Cell[13618, 332, 163, 3, 53, "Subtitle",ExpressionUUID->"0e6a13a1-dfe9-41b1-a255-fe5737e6269a"],
Cell[13784, 337, 3279, 72, 415, "Code",ExpressionUUID->"69b5c4b1-8afa-435d-86e3-be69be48f4ff"],
Cell[17066, 411, 2300, 51, 129, "Code",ExpressionUUID->"bd18636c-03d0-4ccd-ae98-9ab6217a1ee5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19403, 467, 153, 3, 53, "Subtitle",ExpressionUUID->"8ffb2f96-8e13-497b-bbc1-8c83f89cef77"],
Cell[CellGroupData[{
Cell[19581, 474, 160, 3, 67, "Section",ExpressionUUID->"77f9b3a6-58dc-44e8-a6bc-888e178c7587"],
Cell[19744, 479, 288, 7, 30, "Input",ExpressionUUID->"f35e485a-f612-48e5-9486-87b5061e2fe6"],
Cell[20035, 488, 288, 7, 30, "Input",ExpressionUUID->"9fcf39a0-4ad3-4566-add5-e02dedba6d85"],
Cell[20326, 497, 285, 7, 30, "Input",ExpressionUUID->"7d215e69-4a11-43ff-b590-0a6b70a4a3aa"],
Cell[20614, 506, 331, 8, 30, "Input",ExpressionUUID->"2ca372c9-1bfa-4af8-9f75-493b02736994"],
Cell[CellGroupData[{
Cell[20970, 518, 285, 6, 30, "Input",ExpressionUUID->"d7cb4cbc-6998-4238-a27d-3fa158d2706c"],
Cell[21258, 526, 560, 14, 53, "Output",ExpressionUUID->"c1fea307-c300-4706-9a87-0be009e022e9"]
}, Open  ]],
Cell[21833, 543, 1985, 45, 115, "Input",ExpressionUUID->"04b591f1-c2c2-4eb0-8255-c1dd1ddaa5dc"],
Cell[CellGroupData[{
Cell[23843, 592, 493, 12, 52, "Input",ExpressionUUID->"ae8f5789-4cac-4cf6-8836-58fe10bb1dfa"],
Cell[24339, 606, 294, 5, 34, "Output",ExpressionUUID->"76ac2fa3-ee3b-4cb9-9edd-3b8381ed875e"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[24682, 617, 151, 3, 53, "Section",ExpressionUUID->"75373d53-28bc-4960-b9d2-35d7c1300360"],
Cell[CellGroupData[{
Cell[24858, 624, 242, 4, 30, "Input",ExpressionUUID->"af0bda83-2bcb-4214-acee-c677e18b9d9e"],
Cell[25103, 630, 174, 2, 34, "Output",ExpressionUUID->"21e322b0-e308-47a1-a656-69c0fe244d35"]
}, Open  ]],
Cell[25292, 635, 765, 12, 30, "Input",ExpressionUUID->"e185f23b-d9a8-4f8b-b2b5-edd1ca6246b1"],
Cell[CellGroupData[{
Cell[26082, 651, 251, 4, 30, "Input",ExpressionUUID->"1b17a20e-645d-4c6a-8ed3-0a6636981607"],
Cell[26336, 657, 803, 17, 53, "Output",ExpressionUUID->"3572d9c9-e01d-40ec-8903-24a6e7ebfd3e"]
}, Open  ]],
Cell[27154, 677, 1409, 34, 94, "Input",ExpressionUUID->"2ba1e440-f36e-4114-b688-962e7a0aab29"],
Cell[28566, 713, 510, 11, 52, "Input",ExpressionUUID->"c7c49f9d-0d39-44e6-8bdf-e50287f00b9e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29113, 729, 151, 3, 67, "Section",ExpressionUUID->"40950b4d-9185-4588-8c93-9d7e947608bb"],
Cell[29267, 734, 917, 25, 72, "Code",ExpressionUUID->"da0599db-56f2-4aa2-828f-a62aedbf63bd"],
Cell[CellGroupData[{
Cell[30209, 763, 283, 7, 30, "Input",ExpressionUUID->"d0b51622-af00-4a6e-a282-101e9be8b803"],
Cell[30495, 772, 641, 13, 42, "Message",ExpressionUUID->"2a0e4b29-b18b-4c0e-9af1-3abb348a2b96"]
}, Open  ]],
Cell[31151, 788, 402, 11, 30, "Input",ExpressionUUID->"4c2061b5-ce8e-496a-92d5-dc82d3a01f0c"],
Cell[31556, 801, 2078, 46, 115, "Input",ExpressionUUID->"0d3fbad7-e1f9-45a1-bf9b-9de35d0e5e5b"],
Cell[CellGroupData[{
Cell[33659, 851, 262, 5, 30, "Input",ExpressionUUID->"2cdde771-b0e9-452c-adc8-17f4c959df62"],
Cell[33924, 858, 556, 14, 53, "Output",ExpressionUUID->"fdb1f487-3856-4f2b-af3a-fd2da7fb273c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34517, 877, 116, 2, 30, "Input",ExpressionUUID->"d88e9a5f-f909-4939-88e5-9e069d6c2e44"],
Cell[34636, 881, 76054, 1580, 589, "Output",ExpressionUUID->"cf13a8cb-8593-49a3-a4d6-8324a6d55867"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110727, 2466, 442, 11, 52, "Input",ExpressionUUID->"2d9adbda-2b6a-4e07-8f36-efe5abb331d7"],
Cell[111172, 2479, 243, 4, 34, "Output",ExpressionUUID->"6cfa2ecb-fcf0-443f-a6db-5b7fe7e04c56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111452, 2488, 157, 3, 54, "Subsection",ExpressionUUID->"2751c1cd-3ff4-4fa6-928b-c54954005315"],
Cell[CellGroupData[{
Cell[111634, 2495, 458, 11, 51, "Input",ExpressionUUID->"4e912703-f0d2-4051-acba-860766fdd1c9"],
Cell[112095, 2508, 271, 6, 34, "Output",ExpressionUUID->"de6df5c1-8657-44d8-a876-729508bf1c67"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112403, 2519, 457, 11, 51, "Input",ExpressionUUID->"4b3a620d-6fef-43ee-9126-10efc58aaff4"],
Cell[112863, 2532, 242, 5, 34, "Output",ExpressionUUID->"ef7f8274-2255-4c92-982e-01e35f1b0bd0"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[113178, 2545, 157, 3, 53, "Subtitle",ExpressionUUID->"54521ab8-4646-46a9-9e8d-c2816127e30e"],
Cell[113338, 2550, 544, 13, 52, "Input",ExpressionUUID->"ec8cd550-9295-491e-8bc0-6b447fdee824"],
Cell[113885, 2565, 493, 12, 52, "Input",ExpressionUUID->"64b9fa17-71d8-4913-ac89-ca4ee8b85bd7"],
Cell[114381, 2579, 598, 12, 52, "Input",ExpressionUUID->"9a3dd58f-e3e0-4094-8835-4bdf6d78073c"],
Cell[114982, 2593, 354, 9, 30, "Input",ExpressionUUID->"e524f0d8-df24-40f9-ac97-6c4edd459b97"],
Cell[CellGroupData[{
Cell[115361, 2606, 214, 3, 30, "Input",ExpressionUUID->"cc804feb-f8a6-4f89-a1cb-e1a0123501e1"],
Cell[115578, 2611, 180, 2, 34, "Output",ExpressionUUID->"18e3ab05-b5d1-4464-a734-4b1e59b5fc92"]
}, Open  ]],
Cell[115773, 2616, 2740, 58, 157, "Input",ExpressionUUID->"4ec01d83-69d3-4917-a45a-1f0e803c3b2f"],
Cell[118516, 2676, 861, 18, 30, "Input",ExpressionUUID->"426df471-75c9-4def-ba5b-8fd1a513b4ec"],
Cell[119380, 2696, 501, 12, 30, "Input",ExpressionUUID->"720a95d0-4b32-4b23-8986-1c13a9f4958b"],
Cell[CellGroupData[{
Cell[119906, 2712, 322, 8, 30, "Input",ExpressionUUID->"2d7f752a-aaae-4d69-bdd2-2bc7ea610c11"],
Cell[120231, 2722, 260, 5, 34, "Output",ExpressionUUID->"d3cc8ccc-f041-4367-b746-b99c9f7711c0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120528, 2732, 217, 4, 30, "Input",ExpressionUUID->"ee623f19-7cd4-4b71-967f-0b52e4a9ecee"],
Cell[120748, 2738, 158, 3, 34, "Output",ExpressionUUID->"00a0398d-75c3-41f2-8371-870926774661"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120943, 2746, 212, 4, 30, "Input",ExpressionUUID->"b12ae9c6-5857-49a1-85c6-15a73df4265c"],
Cell[121158, 2752, 158, 3, 34, "Output",ExpressionUUID->"9065fed4-6b71-41e7-b5f5-76dee34091b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121353, 2760, 198, 4, 30, "Input",ExpressionUUID->"6c94f2d7-0d41-49cf-804e-6b5664e5ee2e"],
Cell[121554, 2766, 160, 3, 34, "Output",ExpressionUUID->"ce2bfe9e-72c1-41c1-a2e3-4a377f17a50c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121751, 2774, 240, 5, 30, "Input",ExpressionUUID->"547cafb0-725f-434a-94cc-0953feb6d133"],
Cell[121994, 2781, 162, 3, 34, "Output",ExpressionUUID->"08143489-cfb2-4902-a664-b72cb770169f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122193, 2789, 522, 12, 52, "Input",ExpressionUUID->"9d4765ef-87d2-4cb2-91f1-e7705cd3adb3"],
Cell[122718, 2803, 243, 4, 34, "Output",ExpressionUUID->"5190d6e7-aa5a-4bbd-bd01-f0bbfaf58764"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

